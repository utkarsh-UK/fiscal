// Mocks generated by Mockito 5.0.7 from annotations
// in fiscal/test/domain/usecases/transactions/get_recent_transactions_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:fiscal/core/error/failure.dart' as _i5;
import 'package:fiscal/domain/enitities/transactions/transaction.dart' as _i6;
import 'package:fiscal/domain/repositories/transaction_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i3.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Transaction>>>
      getRecentTransactions() => (super.noSuchMethod(
              Invocation.method(#getRecentTransactions, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.Transaction>>>.value(
                      _FakeEither<_i5.Failure, List<_i6.Transaction>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Transaction>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, List<_i6.Transaction>>>> getAllTransactions(
          String? lastFetchedTransactionID, String? time,
          [int? batchSize = 10]) =>
      (super.noSuchMethod(
          Invocation.method(
              #getAllTransactions, [lastFetchedTransactionID, time, batchSize]),
          returnValue:
              Future<_i2.Either<_i5.Failure, Map<String, List<_i6.Transaction>>>>.value(
                  _FakeEither<_i5.Failure, Map<String, List<_i6.Transaction>>>())) as _i4
          .Future<_i2.Either<_i5.Failure, Map<String, List<_i6.Transaction>>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> addNewTransaction(
          _i6.Transaction? transaction) =>
      (super.noSuchMethod(Invocation.method(#addNewTransaction, [transaction]),
              returnValue: Future<_i2.Either<_i5.Failure, String>>.value(
                  _FakeEither<_i5.Failure, String>()))
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
