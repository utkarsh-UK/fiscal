// Mocks generated by Mockito 5.0.7 from annotations
// in fiscal/test/data/repositories/transaction_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:fiscal/data/datasources/local/transaction_local_data_source.dart'
    as _i5;
import 'package:fiscal/data/datasources/remote/transaction_remote_data_source.dart'
    as _i2;
import 'package:fiscal/domain/enitities/transactions/transaction.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

/// A class which mocks [TransactionRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRemoteDataSource extends _i1.Mock
    implements _i2.TransactionRemoteDataSource {
  MockTransactionRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Transaction>> getRecentTransactions() =>
      (super.noSuchMethod(Invocation.method(#getRecentTransactions, []),
              returnValue:
                  Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]))
          as _i3.Future<List<_i4.Transaction>>);
  @override
  _i3.Future<Map<String, List<_i4.Transaction>>> getAllTransactions(
          String? lastFetchedTransactionID,
          [int? batchSize = 10]) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAllTransactions, [lastFetchedTransactionID, batchSize]),
              returnValue: Future<Map<String, List<_i4.Transaction>>>.value(
                  <String, List<_i4.Transaction>>{}))
          as _i3.Future<Map<String, List<_i4.Transaction>>>);
}

/// A class which mocks [TransactionLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionLocalDataSource extends _i1.Mock
    implements _i5.TransactionLocalDataSource {
  MockTransactionLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Transaction>> getRecentTransactions() =>
      (super.noSuchMethod(Invocation.method(#getRecentTransactions, []),
              returnValue:
                  Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]))
          as _i3.Future<List<_i4.Transaction>>);
  @override
  _i3.Future<void> cacheRecentTransactions(
          List<_i4.Transaction>? transactions) =>
      (super.noSuchMethod(
          Invocation.method(#cacheRecentTransactions, [transactions]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> cacheNewTransaction(_i4.Transaction? transaction) => (super
      .noSuchMethod(Invocation.method(#cacheNewTransaction, [transaction]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}
